name: Monitor External Release

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  actions: write

env:
  TARGET_REPOSITORIES: ${{ vars.TARGET_REPOSITORIES }}
  TARGET_REPOSITORY: ${{ vars.TARGET_REPOSITORY }}
  MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
  STATE_ARTIFACT_PREFIX: release-monitor-state
  STATE_FILE: state.json

jobs:
  prepare-targets:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
    steps:
      - name: リポジトリリスト生成
        id: prepare
        env:
          TARGET_REPOSITORIES: ${{ env.TARGET_REPOSITORIES }}
          TARGET_REPOSITORY: ${{ env.TARGET_REPOSITORY }}
          STATE_ARTIFACT_PREFIX: ${{ env.STATE_ARTIFACT_PREFIX }}
        run: |
          set -euo pipefail
          python <<'PY'
          import json
          import os
          import re
          import sys
          def normalize_list(raw):
              values = []
              if not raw:
                  return values
              for part in re.split(r'[\s,]+', raw):
                  part = part.strip()
                  if part:
                      values.append(part)
              return values

          targets = []
          seen = set()
          prefix = os.environ.get("STATE_ARTIFACT_PREFIX", "release-monitor-state")
          for source in (
              os.environ.get("TARGET_REPOSITORIES") or "",
              os.environ.get("TARGET_REPOSITORY") or "",
          ):
              for repo in normalize_list(source):
                  if repo in seen:
                      continue
                  seen.add(repo)
                  slug = re.sub(r'[^0-9A-Za-z_.-]+', '-', repo).strip("-")
                  slug = slug.lower() or "default"
                  targets.append({
                      "repo": repo,
                      "artifact": f"{prefix}-{slug}",
                  })

          if not targets:
              print("TARGET_REPOSITORIES または TARGET_REPOSITORY が未設定です", file=sys.stderr)
              sys.exit(1)

          matrix = json.dumps(targets)
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"matrix={matrix}\n")
          print(f"Monitoring {len(targets)} repositories: {[t['repo'] for t in targets]}")
          PY

  watch-release:
    needs: prepare-targets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ${{ fromJSON(needs.prepare-targets.outputs.matrix) }}
    env:
      TARGET_REPO: ${{ matrix.target.repo }}
      STATE_ARTIFACT_NAME: ${{ matrix.target.artifact }}
    steps:
      - name: 設定検証
        run: |
          set -euo pipefail
          if [ -z "$TARGET_REPO" ]; then
            echo "リポジトリが未設定です" >&2
            exit 1
          fi
          if [ -z "$MATTERMOST_WEBHOOK_URL" ]; then
            echo "Secrets.MATTERMOST_WEBHOOK_URL が未設定です" >&2
            exit 1
          fi

      - name: 最新リリース取得
        id: fetch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          tmp_json=$(mktemp)
          status=$(curl -sS -w '%{http_code}' \
            -H 'Accept: application/vnd.github+json' \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -o "$tmp_json" \
            "https://api.github.com/repos/${TARGET_REPO}/releases/latest")

          if [ "$status" -eq 404 ]; then
            echo "release_found=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ "$status" -ne 200 ]; then
            echo "GitHub API error: HTTP $status" >&2
            cat "$tmp_json" >&2 || true
            exit 1
          fi

          tag=$(jq -r '.tag_name // empty' "$tmp_json")
          if [ -z "$tag" ]; then
            echo "release_found=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          name=$(jq -r '.name // empty' "$tmp_json")
          url=$(jq -r '.html_url // empty' "$tmp_json")
          body=$(jq -r '.body // empty' "$tmp_json")

          {
            echo "release_found=true"
            printf 'tag=%s\n' "$tag"
            printf 'name=%s\n' "$name"
            printf 'url=%s\n' "$url"
            printf 'body<<EOF\n%s\nEOF\n' "$body"
          } >> "$GITHUB_OUTPUT"

      - name: 状態読み込み
        if: steps.fetch.outputs.release_found == 'true'
        id: state
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_NAME: ${{ env.STATE_ARTIFACT_NAME }}
          STATE_FILE: ${{ env.STATE_FILE }}
        run: |
          set -euo pipefail
          response=$(curl -sS \
            -H 'Accept: application/vnd.github+json' \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/artifacts?per_page=100")

          download_url=$(printf '%s\n' "$response" | jq -r --arg name "$ARTIFACT_NAME" \
            '[.artifacts[] | select(.name == $name and .expired == false)] | sort_by(.created_at) | last | .archive_download_url')

          artifact_id=$(printf '%s\n' "$response" | jq -r --arg name "$ARTIFACT_NAME" \
            '[.artifacts[] | select(.name == $name and .expired == false)] | sort_by(.created_at) | last | .id')

          if [ -z "$download_url" ] || [ "$download_url" = "null" ]; then
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "last_tag=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          curl -sS -L \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -o artifact.zip \
            "$download_url"

          unzip -p artifact.zip "$STATE_FILE" > "$STATE_FILE" || true
          rm -f artifact.zip

          last_tag=$(jq -r '.last_tag // ""' "$STATE_FILE" 2>/dev/null || echo "")

          echo "exists=true" >> "$GITHUB_OUTPUT"
          printf 'artifact_id=%s\n' "$artifact_id" >> "$GITHUB_OUTPUT"
          printf 'last_tag=%s\n' "$last_tag" >> "$GITHUB_OUTPUT"

          if [ -n "$artifact_id" ] && [ "$artifact_id" != "null" ]; then
            curl -sS -X DELETE \
              -H 'Accept: application/vnd.github+json' \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/artifacts/${artifact_id}" >/dev/null
          fi

      - name: 新規リリース判定
        if: steps.fetch.outputs.release_found == 'true'
        id: compare
        env:
          LATEST_TAG: ${{ steps.fetch.outputs.tag }}
          LAST_TAG: ${{ steps.state.outputs.last_tag }}
        run: |
          set -euo pipefail
          if [ "$LATEST_TAG" = "$LAST_TAG" ]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: Mattermostメッセージ生成
        if: steps.compare.outputs.changed == 'true'
        id: message
        env:
          TARGET_REPO: ${{ env.TARGET_REPO }}
          RELEASE_TAG: ${{ steps.fetch.outputs.tag }}
          RELEASE_NAME: ${{ steps.fetch.outputs.name }}
          RELEASE_URL: ${{ steps.fetch.outputs.url }}
          RELEASE_BODY: ${{ steps.fetch.outputs.body }}
        run: |
          python <<'PY'
          import json
          import os

          target_repo = os.environ['TARGET_REPO']
          release_tag = os.environ.get('RELEASE_TAG', 'unknown')
          release_name = os.environ.get('RELEASE_NAME') or release_tag
          release_url = os.environ.get('RELEASE_URL', '')
          release_body = os.environ.get('RELEASE_BODY') or ''

          lines = [
              f"External release `{release_tag}` detected for *{target_repo}*",
              f"Title: {release_name}",
              f"URL: {release_url}",
          ]

          if release_body.strip():
              lines.append('\n```markdown')
              lines.append(release_body)
              lines.append('```')

          payload = json.dumps({"text": '\n'.join(lines)})

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write('payload<<EOF\n')
              fh.write(payload)
              fh.write('\nEOF\n')
          PY

      - name: Mattermostへ送信
        if: steps.compare.outputs.changed == 'true'
        run: |
          curl -sS -X POST \
            -H 'Content-Type: application/json' \
            -d '${{ steps.message.outputs.payload }}' \
            "$MATTERMOST_WEBHOOK_URL"

      - name: 状態ファイル作成
        if: steps.fetch.outputs.release_found == 'true'
        env:
          STATE_FILE: ${{ env.STATE_FILE }}
          LAST_TAG: ${{ steps.state.outputs.last_tag }}
          LATEST_TAG: ${{ steps.fetch.outputs.tag }}
          CHANGED: ${{ steps.compare.outputs.changed }}
        run: |
          set -euo pipefail
          tag="$LAST_TAG"
          if [ "$CHANGED" = "true" ]; then
            tag="$LATEST_TAG"
          fi
          printf '{"last_tag":"%s"}\n' "$tag" > "$STATE_FILE"

      - name: 状態保存
        if: steps.fetch.outputs.release_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.STATE_ARTIFACT_NAME }}
          path: ${{ env.STATE_FILE }}
          overwrite: true
