name: Monitor External Release

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  actions: write

env:
  TARGET_REPOSITORIES: ${{ vars.TARGET_REPOSITORIES }}
  TARGET_REPOSITORY: ${{ vars.TARGET_REPOSITORY }}
  MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
  STATE_ARTIFACT_PREFIX: release-monitor-state
  STATE_FILE: state.json
  GEMINI_MODEL: ${{ vars.GEMINI_MODEL }}

jobs:
  prepare-targets:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
    steps:
      - name: リポジトリリスト生成
        id: prepare
        env:
          TARGET_REPOSITORIES: ${{ env.TARGET_REPOSITORIES }}
          TARGET_REPOSITORY: ${{ env.TARGET_REPOSITORY }}
          STATE_ARTIFACT_PREFIX: ${{ env.STATE_ARTIFACT_PREFIX }}
        run: |
          set -euo pipefail
          python <<'PY'
          import json
          import os
          import re
          import sys
          def normalize_list(raw):
              values = []
              if not raw:
                  return values
              for part in re.split(r'[\s,]+', raw):
                  part = part.strip()
                  if part:
                      values.append(part)
              return values

          targets = []
          seen = set()
          prefix = os.environ.get("STATE_ARTIFACT_PREFIX", "release-monitor-state")
          for source in (
              os.environ.get("TARGET_REPOSITORIES") or "",
              os.environ.get("TARGET_REPOSITORY") or "",
          ):
              for repo in normalize_list(source):
                  if repo in seen:
                      continue
                  seen.add(repo)
                  slug = re.sub(r'[^0-9A-Za-z_.-]+', '-', repo).strip("-")
                  slug = slug.lower() or "default"
                  targets.append({
                      "repo": repo,
                      "artifact": f"{prefix}-{slug}",
                  })

          if not targets:
              print("TARGET_REPOSITORIES または TARGET_REPOSITORY が未設定です", file=sys.stderr)
              sys.exit(1)

          matrix = json.dumps(targets)
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"matrix={matrix}\n")
          print(f"Monitoring {len(targets)} repositories: {[t['repo'] for t in targets]}")
          PY

  watch-release:
    needs: prepare-targets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ${{ fromJSON(needs.prepare-targets.outputs.matrix) }}
    env:
      TARGET_REPO: ${{ matrix.target.repo }}
      STATE_ARTIFACT_NAME: ${{ matrix.target.artifact }}
    steps:
      - name: 設定検証
        run: |
          set -euo pipefail
          if [ -z "$TARGET_REPO" ]; then
            echo "リポジトリが未設定です" >&2
            exit 1
          fi
          if [ -z "$MATTERMOST_WEBHOOK_URL" ]; then
            echo "Secrets.MATTERMOST_WEBHOOK_URL が未設定です" >&2
            exit 1
          fi

      - name: 最新リリース取得
        id: fetch
        env:
          TARGET_REPO: ${{ env.TARGET_REPO }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          python <<'PY'
          import json
          import os
          import sys
          import urllib.error
          import urllib.request

          repo = os.environ.get('TARGET_REPO')
          if not repo:
              print('TARGET_REPO is required', file=sys.stderr)
              sys.exit(1)
          token = os.environ.get('GITHUB_TOKEN', '')

          base_headers = {
              'Accept': 'application/vnd.github+json',
              'User-Agent': 'release-monitor-action',
          }
          if token:
              base_headers['Authorization'] = f'Bearer {token}'

          def request(url, accept=None):
              headers = dict(base_headers)
              if accept:
                  headers['Accept'] = accept
              req = urllib.request.Request(url, headers=headers)
              try:
                  with urllib.request.urlopen(req, timeout=30) as resp:
                      return resp.getcode(), resp.read()
              except urllib.error.HTTPError as exc:
                  return exc.code, exc.read()
              except Exception as exc:
                  print(f'HTTP request failed: {exc}', file=sys.stderr)
                  return None, b''

          status, data = request(f'https://api.github.com/repos/{repo}')
          if status != 200 or not data:
              print(f'GitHub API error fetching repository info: HTTP {status}', file=sys.stderr)
              sys.exit(1)
          try:
              repo_info = json.loads(data.decode('utf-8'))
          except Exception as exc:
              print(f'Failed to parse repository info: {exc}', file=sys.stderr)
              sys.exit(1)

          default_branch = repo_info.get('default_branch') or ''

          outputs = {}
          reference_sha = ''

          status, data = request(f'https://api.github.com/repos/{repo}/releases/latest')
          if status == 200 and data:
              try:
                  release = json.loads(data.decode('utf-8', errors='replace'))
              except Exception as exc:
                  print(f'Failed to parse release: {exc}', file=sys.stderr)
                  release = None
              if release:
                  tag = (release.get('tag_name') or '').strip()
                  if tag:
                      outputs.update({
                          'release_found': 'true',
                          'reference_kind': 'release',
                          'tag': tag,
                          'name': (release.get('name') or tag).strip(),
                          'url': release.get('html_url') or '',
                          'body': release.get('body') or '',
                          'default_branch': release.get('target_commitish') or default_branch,
                      })
                      reference_sha = (release.get('target_commitish') or '').strip()
          elif status == 404:
              pass
          else:
              print(f'GitHub API error fetching latest release: HTTP {status}', file=sys.stderr)
              if data:
                  try:
                      print(data.decode('utf-8', errors='replace'), file=sys.stderr)
                  except Exception:
                      pass
              sys.exit(1)

          if not outputs:
              status, data = request(f'https://api.github.com/repos/{repo}/tags?per_page=1')
              if status == 200 and data:
                  try:
                      tags = json.loads(data.decode('utf-8'))
                  except Exception as exc:
                      print(f'Failed to parse tags: {exc}', file=sys.stderr)
                      tags = []
                  if tags:
                      tag_entry = tags[0]
                      tag_name = (tag_entry.get('name') or '').strip()
                      commit_sha = ((tag_entry.get('commit') or {}).get('sha') or '').strip()
                      if tag_name:
                          reference_sha = commit_sha
                          outputs.update({
                              'release_found': 'true',
                              'reference_kind': 'tag',
                              'tag': tag_name,
                              'name': tag_name,
                              'url': f'https://github.com/{repo}/tree/{tag_name}',
                              'body': '',
                              'default_branch': default_branch,
                          })

          if not outputs and default_branch:
              paths = [
                  'CHANGELOG.md',
                  'CHANGE.md',
                  'docs/CHANGELOG.md',
                  'docs/CHANGE.md',
                  'CHANGELOG',
                  'docs/CHANGELOG',
              ]
              for path in paths:
                  status, data = request(f'https://api.github.com/repos/{repo}/commits?sha={default_branch}&path={path}&per_page=1')
                  if status != 200 or not data:
                      continue
                  try:
                      commits = json.loads(data.decode('utf-8'))
                  except Exception:
                      continue
                  if not commits:
                      continue
                  commit = commits[0]
                  sha = (commit.get('sha') or '').strip()
                  if not sha:
                      continue
                  reference_sha = sha
                  outputs.update({
                      'release_found': 'true',
                      'reference_kind': 'changelog',
                      'tag': f'changelog-{sha[:12]}',
                      'name': f'{path} update',
                      'url': f'https://github.com/{repo}/blob/{default_branch}/{path}',
                      'body': '',
                      'default_branch': default_branch,
                      'fallback_branch': default_branch,
                      'fallback_path': path,
                  })
                  break

          outputs.setdefault('default_branch', default_branch or '')

          if not outputs:
              outputs = {
                  'release_found': 'false',
                  'reference_kind': '',
                  'tag': '',
                  'name': '',
                  'url': '',
                  'body': '',
                  'default_branch': default_branch or '',
              }

          if reference_sha:
              outputs['reference_sha'] = reference_sha
          else:
              outputs.setdefault('reference_sha', '')

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              for key, value in outputs.items():
                  value = value or ''
                  if key == 'body':
                      if value:
                          fh.write('body<<EOF
')
                          fh.write(value)
                          fh.write('
EOF
')
                      else:
                          fh.write('body=
')
                      continue
                  fh.write(f'{key}={value}
')
          PY
      - name: 状態読み込み
        if: steps.fetch.outputs.release_found == 'true'
        id: state
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_NAME: ${{ env.STATE_ARTIFACT_NAME }}
          STATE_FILE: ${{ env.STATE_FILE }}
        run: |
          set -euo pipefail
          response=$(curl -sS \
            -H 'Accept: application/vnd.github+json' \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/artifacts?per_page=100")

          download_url=$(printf '%s\n' "$response" | jq -r --arg name "$ARTIFACT_NAME" \
            '[.artifacts[] | select(.name == $name and .expired == false)] | sort_by(.created_at) | last | .archive_download_url')

          artifact_id=$(printf '%s\n' "$response" | jq -r --arg name "$ARTIFACT_NAME" \
            '[.artifacts[] | select(.name == $name and .expired == false)] | sort_by(.created_at) | last | .id')

          if [ -z "$download_url" ] || [ "$download_url" = "null" ]; then
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "last_tag=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          curl -sS -L \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -o artifact.zip \
            "$download_url"

          unzip -p artifact.zip "$STATE_FILE" > "$STATE_FILE" || true
          rm -f artifact.zip

          last_tag=$(jq -r '.last_tag // ""' "$STATE_FILE" 2>/dev/null || echo "")

          echo "exists=true" >> "$GITHUB_OUTPUT"
          printf 'artifact_id=%s\n' "$artifact_id" >> "$GITHUB_OUTPUT"
          printf 'last_tag=%s\n' "$last_tag" >> "$GITHUB_OUTPUT"

          if [ -n "$artifact_id" ] && [ "$artifact_id" != "null" ]; then
            curl -sS -X DELETE \
              -H 'Accept: application/vnd.github+json' \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/artifacts/${artifact_id}" >/dev/null
          fi

      - name: 新規リリース判定
        if: steps.fetch.outputs.release_found == 'true'
        id: compare
        env:
          LATEST_TAG: ${{ steps.fetch.outputs.tag }}
          LAST_TAG: ${{ steps.state.outputs.last_tag }}
        run: |
          set -euo pipefail
          if [ "$LATEST_TAG" = "$LAST_TAG" ]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: リリースノート収集
        if: steps.compare.outputs.changed == 'true'
        id: content
        env:
          TARGET_REPO: ${{ env.TARGET_REPO }}
          RELEASE_TAG: ${{ steps.fetch.outputs.tag }}
          RELEASE_BODY: ${{ steps.fetch.outputs.body }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REFERENCE_KIND: ${{ steps.fetch.outputs.reference_kind }}
          DEFAULT_BRANCH: ${{ steps.fetch.outputs.default_branch }}
          FALLBACK_BRANCH: ${{ steps.fetch.outputs.fallback_branch }}
          FALLBACK_PATH: ${{ steps.fetch.outputs.fallback_path }}
          REFERENCE_SHA: ${{ steps.fetch.outputs.reference_sha }}
        run: |
          set -euo pipefail
          python <<'PY'
          import json
          import os
          import re
          import subprocess
          import sys
          import urllib.error
          import urllib.request

          def log(msg):
              print(msg, file=sys.stderr)

          release_body = os.environ.get('RELEASE_BODY', '') or ''
          target_repo = os.environ.get('TARGET_REPO', '')
          tag = os.environ.get('RELEASE_TAG', '')
          token = os.environ.get('GITHUB_TOKEN', '')
          reference_kind = (os.environ.get('REFERENCE_KIND', '') or '').strip().lower() or 'release'
          fallback_branch = os.environ.get('FALLBACK_BRANCH', '') or ''
          fallback_path = os.environ.get('FALLBACK_PATH', '') or ''
          default_branch = os.environ.get('DEFAULT_BRANCH', '') or ''
          reference_sha = (os.environ.get('REFERENCE_SHA', '') or '').strip()

          content = release_body.strip()
          source = 'release' if content else ''

          def build_candidates(tag_value):
              values = []
              if not tag_value:
                  return values
              values.append(tag_value)
              tail = tag_value.split('/')[-1]
              values.append(tail)
              if tail.startswith('v'):
                  values.append(tail[1:])
              if tag_value.startswith('v'):
                  values.append(tag_value[1:])
              match = re.search(r'(\d+\.\d+(?:\.\d+)*)', tag_value)
              if match:
                  values.append(match.group(1))
              normed = []
              seen = set()
              for item in values:
                  normalized = item.lower()
                  if normalized and normalized not in seen:
                      normed.append(item)
                      seen.add(normalized)
              return normed

          candidates = build_candidates(tag)

          def extract_section(text):
              if not text.strip():
                  return ''
              lines = text.splitlines()
              fallback_idx = None
              for idx, line in enumerate(lines):
                  m = re.match(r'^\s*(#{1,6})\s+(.*)$', line)
                  if not m:
                      continue
                  level = len(m.group(1))
                  heading_text = re.sub(r'[\[\]()]', '', m.group(2))
                  heading_norm = re.sub(r'\s+', ' ', heading_text).lower()
                  if any(c.lower() in heading_norm for c in candidates):
                      start = idx + 1
                      end = len(lines)
                      for j in range(start, len(lines)):
                          m2 = re.match(r'^\s*(#{1,6})\s+', lines[j])
                          if m2 and len(m2.group(1)) <= level:
                              end = j
                              break
                      section = '\n'.join(lines[start:end]).strip()
                      if section:
                          return section
                      fallback_idx = idx
              if fallback_idx is not None:
                  start = fallback_idx + 1
                  excerpt = '\n'.join(lines[start:start + 40]).strip()
                  if excerpt:
                      return excerpt
              trimmed = text.strip()
              if len(trimmed) > 4000:
                  return trimmed[:4000].rstrip() + '\n...'
              return trimmed

          def fetch_changelog():
              if not target_repo:
                  return None, None
              base_paths = [
                  'CHANGELOG.md',
                  'CHANGE.md',
                  'docs/CHANGELOG.md',
                  'docs/CHANGE.md',
                  'CHANGELOG',
                  'docs/CHANGELOG',
              ]
              normalized_fallback = fallback_path.strip()
              ordered_paths = []
              if normalized_fallback:
                  ordered_paths.append(normalized_fallback)
              for path in base_paths:
                  if path not in ordered_paths:
                      ordered_paths.append(path)

              ref_candidates = []
              if reference_kind in ('release', 'tag'):
                  if tag:
                      ref_candidates.append(tag)
                  if reference_sha and reference_sha not in ref_candidates:
                      ref_candidates.append(reference_sha)
              elif reference_kind == 'changelog':
                  if reference_sha:
                      ref_candidates.append(reference_sha)
                  if fallback_branch and fallback_branch not in ref_candidates:
                      ref_candidates.append(fallback_branch)
              if default_branch and default_branch not in ref_candidates:
                  ref_candidates.append(default_branch)
              if not ref_candidates:
                  ref_candidates = [None]

              for path in ordered_paths:
                  for ref in ref_candidates:
                      url = f'https://api.github.com/repos/{target_repo}/contents/{path}'
                      if ref:
                          url = f'{url}?ref={ref}'
                      headers = {
                          'Accept': 'application/vnd.github.raw',
                          'User-Agent': 'release-monitor-action',
                      }
                      if token:
                          headers['Authorization'] = f'Bearer {token}'
                      req = urllib.request.Request(url, headers=headers)
                      try:
                          with urllib.request.urlopen(req) as resp:
                              data = resp.read().decode('utf-8', errors='replace')
                      except urllib.error.HTTPError as exc:
                          if exc.code not in (403, 404):
                              ref_label = ref or 'default'
                              log(f'GitHub API error for {path} (ref {ref_label}): {exc}')
                          if exc.code == 403 and not token:
                              log('GitHub API rate limited and no token provided.')
                          continue
                      except Exception as exc:
                          log(f'Failed to fetch {path}: {exc}')
                          continue
                      section = extract_section(data)
                      if section:
                          return section, f'changelog:{path}'
                      trimmed = data.strip()
                      if trimmed:
                          if len(trimmed) > 4000:
                              trimmed = trimmed[:4000].rstrip() + '\n...'
                          return trimmed, f'changelog:{path}'
              return None, None

          def fetch_npm():
              package = os.environ.get('NPM_PACKAGE') or ''
              if not package:
                  if target_repo and '/' in target_repo:
                      package = target_repo.split('/')[-1]
              if not package:
                  return None, None
              version = ''
              if tag:
                  version = tag.lstrip('v')
                  match = re.search(r'(\d+\.\d+(?:\.\d+)*)', tag)
                  if match:
                      version = match.group(1)
              if not version:
                  return None, None
              try:
                  proc = subprocess.run(
                      ['npm', 'view', f'{package}@{version}', '--json'],
                      stdout=subprocess.PIPE,
                      stderr=subprocess.PIPE,
                      text=True,
                      check=True,
                  )
              except subprocess.CalledProcessError as exc:
                  log(f'npm view failed: {exc.stderr.strip() or exc.stdout.strip() or exc}')
                  return None, None
              raw = proc.stdout.strip()
              if not raw or raw in ('null', 'undefined'):
                  return None, None
              try:
                  data = json.loads(raw)
              except json.JSONDecodeError as exc:
                  log(f'Failed to parse npm output: {exc}')
                  return None, None
              if isinstance(data, list):
                  data = data[0] if data else {}
              parts = []
              description = data.get('description')
              if description:
                  parts.append(description.strip())
              release_notes = data.get('releaseNotes') or data.get('changelog')
              if release_notes:
                  parts.append(str(release_notes).strip())
              readme = data.get('readme')
              if readme:
                  section = extract_section(readme)
                  if section:
                      parts.append(section)
              time_info = data.get('time') or {}
              published_at = time_info.get(version)
              if published_at:
                  parts.append(f'Published on npm: {published_at}')
              homepage = data.get('homepage')
              if homepage:
                  parts.append(f'Homepage: {homepage}')
              if not parts:
                  return None, None
              text = '\n\n'.join(part for part in parts if part).strip()
              if len(text) > 4000:
                  text = text[:4000].rstrip() + '\n...'
              return text, f'npm:{package}@{version}'

          if not content:
              changelog_text, changelog_source = fetch_changelog()
              if changelog_text:
                  content = changelog_text.strip()
                  source = changelog_source or 'changelog'
          if not content:
              npm_text, npm_source = fetch_npm()
              if npm_text:
                  content = npm_text.strip()
                  source = npm_source or 'npm'
          if not content:
              source = source or 'none'

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write('content<<EOF\n')
              fh.write(content)
              fh.write('\nEOF\n')
              fh.write(f'source={source}\n')
          PY

      - name: リリースノート翻訳
        if: steps.compare.outputs.changed == 'true'
        id: translate
        env:
          RELEASE_TEXT: ${{ steps.content.outputs.content }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL: ${{ env.GEMINI_MODEL }}
        run: |
          set -euo pipefail
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "Secrets.GEMINI_API_KEY が未設定です" >&2
            exit 1
          fi
          python3 -m pip install --upgrade --quiet google-generativeai
          body="${RELEASE_TEXT:-}"
          if [ -z "$body" ]; then
            echo "translated=" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          python <<'PY'
          import os
          import sys
          import textwrap

          body = os.environ.get('RELEASE_TEXT', '')
          if not body.strip():
              with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
                  fh.write('translated=\n')
              sys.exit(0)

          api_key = os.environ.get('GEMINI_API_KEY')
          if not api_key:
              print('Gemini API key is missing', file=sys.stderr)
              sys.exit(1)

          model_name = os.environ.get('GEMINI_MODEL') or 'gemini-1.5-flash'

          try:
              import google.generativeai as genai
          except ImportError as exc:
              print(f'google.generativeai import failed: {exc}', file=sys.stderr)
              sys.exit(1)

          genai.configure(api_key=api_key)
          prompt = textwrap.dedent(
              """
              Translate the following release note content into Japanese. Preserve Markdown formatting, keep code fences, and conclude with a Japanese bullet list summarizing the key updates.

              -----
              {body}
              """
          ).format(body=body)

          try:
              model = genai.GenerativeModel(model_name)
              response = model.generate_content(prompt)
          except Exception as exc:
              print(f'Gemini generate_content failed: {exc}', file=sys.stderr)
              sys.exit(1)

          text = ''
          if hasattr(response, 'text') and response.text:
              text = response.text
          else:
              for part in getattr(response, 'parts', []) or []:
                  text_part = getattr(part, 'text', None)
                  if text_part:
                      text += text_part

          text = text.strip()
          if not text:
              print('Gemini からテキストレスポンスが得られませんでした', file=sys.stderr)
              sys.exit(1)

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write('translated<<EOF\n')
              fh.write(text)
              fh.write('\nEOF\n')
          PY

      - name: Mattermostメッセージ生成
        if: steps.compare.outputs.changed == 'true'
        id: message
        env:
          TARGET_REPO: ${{ env.TARGET_REPO }}
          RELEASE_TAG: ${{ steps.fetch.outputs.tag }}
          RELEASE_NAME: ${{ steps.fetch.outputs.name }}
          RELEASE_URL: ${{ steps.fetch.outputs.url }}
          RELEASE_CONTENT: ${{ steps.content.outputs.content }}
          CONTENT_SOURCE: ${{ steps.content.outputs.source }}
          TRANSLATED_BODY: ${{ steps.translate.outputs.translated }}
        run: |
          python <<'PY'
          import json
          import os

          def truncate(text, limit=1800):
              if len(text) <= limit:
                  return text
              return text[:limit].rstrip() + '\n...'

          target_repo = os.environ['TARGET_REPO']
          release_tag = os.environ.get('RELEASE_TAG', 'unknown')
          release_name = os.environ.get('RELEASE_NAME') or release_tag
          release_url = os.environ.get('RELEASE_URL', '')
          translated = os.environ.get('TRANSLATED_BODY') or ''
          release_content = os.environ.get('RELEASE_CONTENT') or ''
          source_key = os.environ.get('CONTENT_SOURCE') or ''

          lines = [
              f"Release `{release_tag}` detected for *{target_repo}*",
              f"Title: {release_name}",
              f"URL: {release_url}",
          ]

          def describe_source(key):
              if not key or key == 'none':
                  return None
              if key == 'release':
                  return '情報ソース: GitHub Release'
              if key.startswith('changelog:'):
                  return f"情報ソース: {key.split(':', 1)[1]}"
              if key.startswith('npm:'):
                  return f"情報ソース: npm {key.split(':', 1)[1]}"
              return f"情報ソース: {key}"

          source_line = describe_source(source_key)
          if source_line:
              lines.append(source_line)

          translated = translated.strip()
          if translated:
              lines.append('')
              lines.append('リリースノート')
              lines.append('```markdown')
              lines.append(translated)
              lines.append('```')
          else:
              fallback = truncate(release_content.strip())
              if fallback:
                  lines.append('')
                  lines.append('原文')
                  lines.append('```markdown')
                  lines.append(fallback)
                  lines.append('```')
              else:
                  lines.append('')
                  lines.append('リリースノート情報を取得できませんでした。')

          payload = json.dumps({"text": '\n'.join(lines)})

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write('payload<<EOF\n')
              fh.write(payload)
              fh.write('\nEOF\n')
          PY

      - name: Mattermostへ送信
        if: steps.compare.outputs.changed == 'true'
        run: |
          curl -sS -X POST \
            -H 'Content-Type: application/json' \
            -d '${{ steps.message.outputs.payload }}' \
            "$MATTERMOST_WEBHOOK_URL"

      - name: 状態ファイル作成
        if: steps.fetch.outputs.release_found == 'true'
        env:
          STATE_FILE: ${{ env.STATE_FILE }}
          LAST_TAG: ${{ steps.state.outputs.last_tag }}
          LATEST_TAG: ${{ steps.fetch.outputs.tag }}
          CHANGED: ${{ steps.compare.outputs.changed }}
        run: |
          set -euo pipefail
          tag="$LAST_TAG"
          if [ "$CHANGED" = "true" ]; then
            tag="$LATEST_TAG"
          fi
          printf '{"last_tag":"%s"}\n' "$tag" > "$STATE_FILE"

      - name: 状態保存
        if: steps.fetch.outputs.release_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.STATE_ARTIFACT_NAME }}
          path: ${{ env.STATE_FILE }}
          overwrite: true
